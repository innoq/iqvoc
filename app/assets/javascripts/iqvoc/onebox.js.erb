/*jslint vars: true, browser: true, white: true */
/*global jQuery, IQVOC */

IQVOC.onebox = (function($) {

"use strict";

function OneBox(container) {
  this.container = container.jquery ? container : $(container);
  this.form = this.container.find('form');
  this.input = $(".onebox-input", this.form); // TODO: document
  this.results = $('<ol class="search-results list-unstyled" />');
  this.indicator = $('<i class="fa fa-refresh fa-spin fa-3x onebox-indicator" />').
      appendTo(this.container).hide();

  this.form.on("submit", $.proxy(this, "onSubmit"));
  this.input.on("keyup", debounce($.proxy(this, "onInput"), 300));
}
OneBox.prototype.reset = function() {
  this.container.children().not(this.form).not(this.indicator).remove();
};
OneBox.prototype.renderResults = function(html) {
  var doc = $("<div />").append(html);
  var items = $(".search-results > li", doc);
  var pagination = $(".pagination", doc);

  this.reset();
  this.results.empty().append(items).appendTo(this.container);
  pagination.appendTo(this.container);
};
OneBox.prototype.onInput = function(ev) {
  var val = this.input.val();
  this.reset();
  // start search if there are at least two characters in onebox
  if(val.length >= 2 && val !== this.initialValue) {
    this.getConcepts();
  }
};
OneBox.prototype.getConcepts = function() {
  this.indicator.show();
  $.ajax({
    type: this.form.attr("method"),
    url: this.form.attr("action"),
    data: this.form.serialize(),
    success: $.proxy(this, "onResults")
  });
};
OneBox.prototype.onResults = function(html, status, xhr) {
  // TODO request resource with layout=0
  // disable scripts (adapted from jQuery#load)
  var rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
  html = html.replace(rscript, "");

  this.indicator.hide();
  this.renderResults(html);
};

return function(selector) {
  return new OneBox(selector); // XXX: returning an instance of a private class seems weird
};

function debounce(fn, delay) { // TODO: move elsewhere
  var timer;
  return function() {
    var self = this;
    var args = arguments;
    if(timer) {
      clearTimeout(timer);
      timer = null;
    }
    timer = setTimeout(function() {
      fn.apply(self, args);
      timer = null;
    }, delay);
  };
}

}(jQuery));
