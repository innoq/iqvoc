<%-
# TODO: We'll need a 'collection_view_data' helper (containing the following
# "Note" stuff too).
-%>
<%#= render 'layouts/sections', :sections => ["labels"], :data => concept_view_data(collection) %>

<% Iqvoc::Concept.labeling_classes.each do |labeling_class, languages| %>
    <%= render labeling_class.partial_name(collection), klass: labeling_class, concept: collection, available_languages: languages || Iqvoc.available_languages %>
<% end %>

<div class="relation panel">
  <h2><%= Note::SKOS::Definition.model_name.human(:count => 2) %></h2>
  <ul>
    <% collection.note_skos_definitions.each do |definition| %>
      <li><%= definition.value %> (<%= definition.language %>)</li>
    <% end %>
  </ul>
</div>

<div class="relation panel">
  <h2>
    <%= Iqvoc::Concept.base_class.model_name.human(:count => 2) %>
    <% if can?(:update, Iqvoc::Concept.base_class)%>
      <small>
        (<%= collection.concepts.size %>)
      </small>
    <% end %>
  </h2>
  <div class="relation-body">
    <ul>
      <%- collection.concepts.with_pref_labels.each do |concept| -%>
        <%- if concept.published? || (!concept.published_version_id && can?(:update, concept)) -%>
          <li><%= render concept.class.inline_partial_name, :concept => concept %></li>
        <%- end -%>
      <%- end -%>
    </ul>
  </div>
</div>

<div class="relation panel">
  <h2>
    <%= Iqvoc::Collection.base_class.model_name.human(:count => 2) %>
    <% if can?(:update, Iqvoc::Collection.base_class)%>
    <small>
      (<%= collection.subcollections.size %>)
    </small>
  <% end %>
  </h2>
  <ul class="hybrid-treeview" data-url="<%= collections_path(:format => :json) %>">
    <%= render :partial => 'collection', :collection => collection.subcollections.with_pref_labels %>
  </ul>
</div>
